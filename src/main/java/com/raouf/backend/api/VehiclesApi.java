/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.raouf.backend.api;

import com.raouf.backend.api.model.Error400;
import com.raouf.backend.api.model.Vehicle;
import com.raouf.backend.api.model.VehicleCU;
import com.raouf.backend.common.RaoufApiEndpoints;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@Api(value = "vehicles", description = "the vehicles API", tags = {"vehicles",})
public interface VehiclesApi {

    @ApiOperation(value = "create a new vehicle", nickname = "createVehicle", notes = "Creates a new vehicle", response = Vehicle.class, tags={ "vehicles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful operation", response = Vehicle.class),
        @ApiResponse(code = 400, message = "Malformed vehicle creation request", response = Error400.class) })
    @RequestMapping(value = RaoufApiEndpoints.VEHICLES,
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Vehicle> createVehicle(@ApiParam(value = "the vehicle to create"  )  @Valid @RequestBody VehicleCU vehicle);


    @ApiOperation(value = "deletes a vehicle", nickname = "deleteVehicle", notes = "Deletes the given vehicle. Be careful, all dependencies will be removed.", tags={ "vehicles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Succesful operation"),
        @ApiResponse(code = 400, message = "Malformed vehicle delete request", response = Error400.class),
        @ApiResponse(code = 404, message = "No vehicle found with this Id") })
    @RequestMapping(value = RaoufApiEndpoints.VEHICLES_DETAIL,
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteVehicle(@ApiParam(value = "the vehicle Id",required=true) @PathVariable("vehicleId") Long vehicleId);


    @ApiOperation(value = "returns all vehicle", nickname = "getAllVehicle", notes = "Returns all vehicle", response = Vehicle.class, responseContainer = "List", tags={ "vehicles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull operation", response = Vehicle.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Malformed status", response = Error400.class),
        @ApiResponse(code = 404, message = "Vehicle not found") })
    @RequestMapping(value = RaoufApiEndpoints.VEHICLES,
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Vehicle>> getAllVehicle();


    @ApiOperation(value = "returns a vehicle data", nickname = "getVehicle", notes = "Returns a vehicle data", response = Vehicle.class, tags={ "vehicles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull operation", response = Vehicle.class),
        @ApiResponse(code = 400, message = "Malformed vehicle ID", response = Error400.class),
        @ApiResponse(code = 404, message = "Vehicle not found") })
    @RequestMapping(value = RaoufApiEndpoints.VEHICLES_DETAIL,
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Vehicle> getVehicle(@ApiParam(value = "the member Id",required=true) @PathVariable("vehicleId") Long vehicleId);


    @ApiOperation(value = "updates vehicle data", nickname = "updateVehicleInformation", notes = "Updates vehicle data", response = Vehicle.class, tags={ "vehicles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful operation", response = Vehicle.class),
        @ApiResponse(code = 400, message = "Malformed vehicle update request", response = Error400.class),
        @ApiResponse(code = 404, message = "No vehicle found with this Id") })
    @RequestMapping(value = RaoufApiEndpoints.VEHICLES_DETAIL,
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Vehicle> updateVehicleInformation(@ApiParam(value = "the member Id",required=true) @PathVariable("vehicleId") Long vehicleId,@ApiParam(value = "the pratitionner to update"  )  @Valid @RequestBody VehicleCU vehicle);

}
